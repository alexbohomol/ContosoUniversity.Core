name: PR Checks (Monolith)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths: 
      - "apps/monolith/**"
      - "database/**"
      - ".github/codeql.yml"
      - ".github/**"
  workflow_dispatch:

env:
  DOTNET_VERSION: 9.0.x
  REGISTRY: ghcr.io
  IMAGE_NAME: cuweb
  IMAGE_PATH: alexbohomol/contoso

jobs:

  build_and_unit_testing:
    if: false
    name: Build and Unit Testing
    runs-on: ubuntu-latest
    env:
      TEST_PROJ_PATH: ${{ vars.MONOLITH_SLN_PATH }}/test/unit/ContosoUniversity.Domain.Tests
    defaults:
      run:
        working-directory: ${{ vars.MONOLITH_SLN_PATH }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build Solution
      run: |
        dotnet restore
        dotnet build --no-restore
      
    - name: Run Unit Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: dotnet test --no-build --verbosity normal
      
  code_style_checks:
    if: false
    name: Code style checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ vars.MONOLITH_SLN_PATH }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build Solution
      run: |
        dotnet restore
        dotnet build --no-restore
      
    - name: Dotnet Format Checks (Whitespaces)
      run: |
        dotnet format whitespace \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes
      
    - name: Dotnet Format Checks (Style)
      run: |
        dotnet format style \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes
      
    - name: Dotnet Format Checks (Analizers)
      run: |
        dotnet format analyzers \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes
      
  integration_testing:
    if: false
    name: Integration Testing / In-Process
    runs-on: ubuntu-latest
    # needs: build_and_unit_testing
    env:
      TEST_PROJ_PATH: ${{ vars.MONOLITH_SLN_PATH }}/test/integration/ContosoUniversity.Mvc.IntegrationTests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Developer Cert
      working-directory: ${{ vars.MONOLITH_SLN_PATH }}/src/ContosoUniversity.Mvc
      run: |
        dotnet dev-certs https -ep cert.pfx -p Test1234!
        ls -lah

    - name: Pull Docker images
      run: |
        docker pull mcr.microsoft.com/mssql/server
        docker pull mcr.microsoft.com/mssql-tools

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
      
    - name: Build Integration Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet restore
        dotnet build --no-restore
      
    - name: Run Integration Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet test --no-build --verbosity normal

  build_and_push_image:
    # if: false
    name: Build & Push Image
    runs-on: ubuntu-latest
    # needs: build_and_unit_testing
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    outputs:
      image_tag: ${{ steps.extract_image_tag.outputs.IMAGE_TAG }}
    defaults:
      run:
        working-directory: ${{ vars.MONOLITH_SLN_PATH }}/src/ContosoUniversity.Mvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Developer Cert
        run: |
          dotnet dev-certs https -ep cert.pfx -p Test1234!
          ls -lah

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PATH }}/mnlth/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha
            type=raw,value=temp-ci-{{sha}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ${{ vars.MONOLITH_SLN_PATH }}
          file: ${{ vars.MONOLITH_SLN_PATH }}/src/ContosoUniversity.Mvc/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # https://github.com/docker/metadata-action/issues/164#issuecomment-1853484347
      - name: Extract SHA image tag
        id: extract_image_tag
        env:
          DOCKER_METADATA: ${{ steps.meta.outputs.json }}
        run: |
          IMAGE_TAG=$(echo "$DOCKER_METADATA" | jq -r '.tags[] | select(. | test("temp-ci-"))')
          IMAGE_TAG=$(echo "$IMAGE_TAG" | grep -o 'temp-ci-[a-f0-9]\+')
          echo $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

  check_system_health:
    # if: false
    name: Check System Health
    runs-on: ubuntu-latest
    needs: build_and_push_image
    permissions:
      packages: read
    env:
      IMAGE_TAG: ${{ needs.build_and_push_image.outputs.image_tag }}
    defaults:
      run:
        working-directory: ${{ vars.MONOLITH_SLN_PATH }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Docker Compose Pull
        run: |
          set IMAGE_TAG=${{ env.IMAGE_TAG }}
          docker compose pull

      - name: Run Docker Compose Up
        run: |
          docker compose up --wait

      - name: List Docker images
        run: docker image ls --all

      - name: List Docker containers
        run: docker container ls --all

      - name: Inspect container | cuweb
        run: docker inspect cuweb

      - name: Curl to cuweb
        run: curl http://localhost:10000/Courses

      - name: Grab container logs | cuweb
        if: always()
        run: docker logs cuweb

      - name: Grab container logs | mssql
        if: always()
        run: docker logs mssql

      - name: Grab container logs | mssql-migrator
        if: always()
        run: docker logs mssql-migrator

      - name: Shut down Docker Infra
        run: docker compose down

  system_testing:
    if: false
    name: System Testing / External-Process
    runs-on: ubuntu-latest
    needs: check_system_health
    permissions:
      packages: read
    env:
      TEST_PROJ_PATH: ${{ vars.MONOLITH_SLN_PATH }}/test/system/ContosoUniversity.SystemTests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Docker Compose
      run: sudo curl -L "https://github.com/docker/compose/releases/download/v2.11.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - name: Set Permissions
      run: sudo chmod +x /usr/local/bin/docker-compose

    - name: Inspect Docker Environment
      run: |
        docker version
        docker compose version
        docker-compose version
        ls -lah

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Docker Compose Pull
      working-directory: ${{ vars.MONOLITH_SLN_PATH }}
      run: |
        set IMAGE_TAG=${{ env.IMAGE_TAG }}
        docker compose pull

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build System Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Ensure browsers are installed
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: pwsh bin/Debug/net9.0/playwright.ps1 install --with-deps

    - name: Run System Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet test --no-build --verbosity normal

  e2e_testing:
    if: false
    name: E2E Testing / External-Process
    runs-on: ubuntu-latest
    needs: check_system_health
    permissions:
      packages: read
    env:
      TEST_PROJ_PATH: ${{ vars.MONOLITH_SLN_PATH }}/test/e2e/ContosoUniversity.AcceptanceTests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Docker Compose
      run: sudo curl -L "https://github.com/docker/compose/releases/download/v2.11.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - name: Set Permissions
      run: sudo chmod +x /usr/local/bin/docker-compose

    - name: Inspect Docker Environment
      run: |
        docker version
        docker compose version
        docker-compose version
        ls -lah

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Docker Compose Pull
      working-directory: ${{ vars.MONOLITH_SLN_PATH }}
      run: |
        set IMAGE_TAG=${{ env.IMAGE_TAG }}
        docker compose pull

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Acceptance Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Ensure browsers are installed
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: pwsh bin/Debug/net9.0/playwright.ps1 install --with-deps

    - name: Run Acceptance Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet test --no-build --verbosity normal
