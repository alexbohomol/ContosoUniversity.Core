name: PR Checks (Microservices)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths: 
      - "apps/mservices/**"
      - "database/**"
      - ".github/**"

env:
  DOTNET_VERSION: 8.0.x
  MSSQL_SA_PASSWORD: <YourStrong!Passw0rd>

jobs:

  build_and_unit_testing:
    name: Build and Unit Testing
    runs-on: ubuntu-latest
    env:
      TEST_PROJ_PATH: ${{ vars.MSERVICES_SLN_PATH }}/test/unit/Departments.Core.Tests
    defaults:
      run:
        working-directory: ${{ vars.MSERVICES_SLN_PATH }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Solution
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Run Unit Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: dotnet test --no-build --verbosity normal

  code_style_checks:
    name: Code style checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ vars.MSERVICES_SLN_PATH }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Solution
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Dotnet Format Checks (Whitespaces)
      run: |
        dotnet format whitespace \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes

    - name: Dotnet Format Checks (Style)
      run: |
        dotnet format style \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes

    - name: Dotnet Format Checks (Analizers)
      run: |
        dotnet format analyzers \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes

  integration_testing:
    if: true
    name: Integration Testing / ContosoUniversity.Mvc
    runs-on: ubuntu-latest
    env:
      TEST_PROJ_PATH: ${{ vars.MSERVICES_SLN_PATH }}/test/integration/ContosoUniversity.Mvc.IntegrationTests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Explore Environment
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: |
        docker version
        docker compose version
        ls -lah

    - name: Start Docker Infrastructure
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: docker compose up -d courses-api departments-api students-api
      
    - name: Init test database
      run: |
        docker run --rm \
        --entrypoint /opt/mssql-tools/bin/sqlcmd \
        --workdir /scripts \
        --volume "$(pwd)"/database:/scripts \
        --network cunetwork \
        mcr.microsoft.com/mssql-tools \
        -S cudb -U SA -P "${{ env.MSSQL_SA_PASSWORD }}" -i "db-init.sql"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
      
    - name: Build Integration Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet restore
        dotnet build --no-restore
      
    - name: Run Integration Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet test --no-build --verbosity normal

    - name: Grab container logs | courses-api
      if: always()
      run: docker logs courses-api

    - name: Grab container logs | departments-api
      if: always()
      run: docker logs departments-api

    - name: Grab container logs | students-api
      if: always()
      run: docker logs students-api

  integration_testing_courses_api:
    if: true
    name: Integration Testing / Courses.Api
    runs-on: ubuntu-latest
    env:
      TEST_PROJ_PATH: ${{ vars.MSERVICES_SLN_PATH }}/test/integration/Courses.Api.IntegrationTests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Explore Environment
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: |
        docker version
        docker compose version
        ls -lah

    - name: Start Docker Infrastructure
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: docker compose up -d db

    - name: Init test database
      run: |
        docker run --rm \
        --entrypoint /opt/mssql-tools/bin/sqlcmd \
        --workdir /scripts \
        --volume "$(pwd)"/database:/scripts \
        --network cunetwork \
        mcr.microsoft.com/mssql-tools \
        -S cudb -U SA -P "${{ env.MSSQL_SA_PASSWORD }}" -i "db-init.sql"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Integration Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Run Integration Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet test --no-build --verbosity normal

  integration_testing_departments_api:
    if: true
    name: Integration Testing / Departments.Api
    runs-on: ubuntu-latest
    env:
      TEST_PROJ_PATH: ${{ vars.MSERVICES_SLN_PATH }}/test/integration/Departments.Api.IntegrationTests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Explore Environment
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: |
        docker version
        docker compose version
        ls -lah

    - name: Start Docker Infrastructure
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: docker compose up -d db

    - name: Init test database
      run: |
        docker run --rm \
        --entrypoint /opt/mssql-tools/bin/sqlcmd \
        --workdir /scripts \
        --volume "$(pwd)"/database:/scripts \
        --network cunetwork \
        mcr.microsoft.com/mssql-tools \
        -S cudb -U SA -P "${{ env.MSSQL_SA_PASSWORD }}" -i "db-init.sql"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Integration Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Run Integration Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet test --no-build --verbosity normal

  integration_testing_students_api:
    if: true
    name: Integration Testing / Students.Api
    runs-on: ubuntu-latest
    env:
      TEST_PROJ_PATH: ${{ vars.MSERVICES_SLN_PATH }}/test/integration/Students.Api.IntegrationTests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Explore Environment
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: |
        docker version
        docker compose version
        ls -lah

    - name: Start Docker Infrastructure
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: docker compose up -d db

    - name: Init test database
      run: |
        docker run --rm \
        --entrypoint /opt/mssql-tools/bin/sqlcmd \
        --workdir /scripts \
        --volume "$(pwd)"/database:/scripts \
        --network cunetwork \
        mcr.microsoft.com/mssql-tools \
        -S cudb -U SA -P "${{ env.MSSQL_SA_PASSWORD }}" -i "db-init.sql"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Integration Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Run Integration Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet test --no-build --verbosity normal

  system_testing:
    if: true
    name: System Testing | External-Process
    runs-on: ubuntu-latest
    env:
      TEST_PROJ_PATH: ${{ vars.MSERVICES_SLN_PATH }}/test/system/ContosoUniversity.SystemTests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Explore Environment
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: |
        docker version
        docker compose version
        ls -lah

    - name: Developer Cert
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}/src/ContosoUniversity.Mvc
      run: |
        dotnet dev-certs https -ep cert.pfx -p Test1234!

    - name: Start Docker Infrastructure
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: docker compose up -d

    - name: Inspect container | courses-api
      if: always()
      run: docker inspect courses-api

    - name: Inspect container | cuweb
      if: always()
      run: docker inspect cuweb
      
    - name: Init test database
      run: |
        docker run --rm \
        --entrypoint /opt/mssql-tools/bin/sqlcmd \
        --workdir /scripts \
        --volume "$(pwd)"/database:/scripts \
        --network cunetwork \
        mcr.microsoft.com/mssql-tools \
        -S cudb -U SA -P "${{ env.MSSQL_SA_PASSWORD }}" -i "db-init.sql"

    - name: Curl to cuweb
      if: always()
      run: curl http://localhost:10000/Courses

    - name: Curl to courses-api
      if: always()
      run: curl http://localhost:5006/api/courses | jq .

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build System Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Ensure browsers are installed
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps

    - name: Run System Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet test --no-build --verbosity normal

    - name: Grab container logs | courses-api
      if: always()
      run: docker logs courses-api

    - name: Grab container logs | departments-api
      if: always()
      run: docker logs departments-api

    - name: Grab container logs | students-api
      if: always()
      run: docker logs students-api

    - name: Grab container logs | cuweb
      if: always()
      run: docker logs cuweb

  e2e_testing_in_process:
    if: true
    name: E2E Testing | External-Process
    runs-on: ubuntu-latest
    env:
      TEST_PROJ_PATH: ${{ vars.MSERVICES_SLN_PATH }}/test/e2e/ContosoUniversity.AcceptanceTests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Explore Environment
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: |
        docker version
        docker compose version
        ls -lah

    - name: Developer Cert
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}/src/ContosoUniversity.Mvc
      run: |
        dotnet dev-certs https -ep cert.pfx -p Test1234!

    - name: Start Docker Infrastructure
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: docker compose up -d

    - name: Inspect container | courses-api
      if: always()
      run: docker inspect courses-api

    - name: Inspect container | cuweb
      if: always()
      run: docker inspect cuweb
      
    - name: Init test database
      run: |
        docker run --rm \
        --entrypoint /opt/mssql-tools/bin/sqlcmd \
        --workdir /scripts \
        --volume "$(pwd)"/database:/scripts \
        --network cunetwork \
        mcr.microsoft.com/mssql-tools \
        -S cudb -U SA -P "${{ env.MSSQL_SA_PASSWORD }}" -i "db-init.sql"

    - name: Curl to cuweb
      if: always()
      run: curl http://localhost:10000/Courses

    - name: Curl to courses-api
      if: always()
      run: curl http://localhost:5006/api/courses | jq .

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
      
    - name: Build Acceptance Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet restore
        dotnet build --no-restore
      
    - name: Ensure browsers are installed
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps

    - name: Run Acceptance Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet test --no-build --verbosity normal

    - name: Grab container logs | courses-api
      if: always()
      run: docker logs courses-api

    - name: Grab container logs | departments-api
      if: always()
      run: docker logs departments-api

    - name: Grab container logs | students-api
      if: always()
      run: docker logs students-api

    - name: Grab container logs | cuweb
      if: always()
      run: docker logs cuweb
