name: PR Checks (Microservices)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths: 
      - "apps/mservices/**"
      - "database/**"
      - ".github/codeql.yml"
      - ".github/**"
  workflow_dispatch:

env:
  DOTNET_VERSION: 9.0.x
  MSSQL_SA_PASSWORD: <YourStrong!Passw0rd>

jobs:

  build_and_unit_testing:
    if: false
    name: Build and Unit Testing
    runs-on: ubuntu-latest
    env:
      TEST_PROJ_PATH: ${{ vars.MSERVICES_SLN_PATH }}/test/unit/Departments.Core.Tests
    defaults:
      run:
        working-directory: ${{ vars.MSERVICES_SLN_PATH }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Solution
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Run Unit Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: dotnet test --no-build --verbosity normal

  code_style_checks:
    if: false
    name: Code style checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ vars.MSERVICES_SLN_PATH }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Solution
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Dotnet Format Checks (Whitespaces)
      run: |
        dotnet format whitespace \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes

    - name: Dotnet Format Checks (Style)
      run: |
        dotnet format style \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes

    - name: Dotnet Format Checks (Analizers)
      run: |
        dotnet format analyzers \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes

  integration_testing:
    if: false
    name: Integration Testing / ${{ matrix.title }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ vars.MSERVICES_SLN_PATH }}/${{ matrix.proj_path }}

    strategy:
      fail-fast: false
      matrix:
        include:
        - title: ContosoUniversity.Mvc
          proj_path: test/integration/ContosoUniversity.Mvc.IntegrationTests
        - title: Courses.Api
          proj_path: test/integration/Courses.Api.IntegrationTests
        - title: Departments.Api
          proj_path: test/integration/Departments.Api.IntegrationTests
        - title: Students.Api
          proj_path: test/integration/Students.Api.IntegrationTests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Testing Project
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Run Integration Tests
      run: |
        dotnet test --no-build --verbosity normal

  build_and_save_mvc:
    if: false
    name: Build & Save Mvc Image
    runs-on: ubuntu-latest
    # needs: build_and_unit_testing
    defaults:
      run:
        working-directory: ${{ vars.MSERVICES_SLN_PATH }}/src/ContosoUniversity.Mvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Developer Cert
        run: |
          dotnet dev-certs https -ep cert.pfx -p Test1234!
          ls -lah

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image locally
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ${{ vars.MSERVICES_SLN_PATH }}
          file: ${{ vars.MSERVICES_SLN_PATH }}/src/ContosoUniversity.Mvc/Dockerfile
          tags: cuweb:latest
          outputs: type=docker,dest=${{ runner.temp }}/cuweb.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cuweb
          path: ${{ runner.temp }}/cuweb.tar

  build_and_save_images:
    # if: false
    name: Build & Save ${{ matrix.title }}
    runs-on: ubuntu-latest
    # needs: build_and_unit_testing

    strategy:
      fail-fast: false
      matrix:
        include:
        - title: ContosoUniversity.Mvc
          image_name: cuweb
          proj_path: src/ContosoUniversity.Mvc
        - title: Courses.Api
          image_name: courses-api
          proj_path: src/Courses.Api
        - title: Departments.Api
          image_name: departments-api
          proj_path: src/Departments.Api
        - title: Students.Api
          image_name: students-api
          proj_path: src/Students.Api

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Developer Cert
        if: ${{ matrix.image_name == 'cuweb' }}
        run: |
          dotnet dev-certs https -ep cert.pfx -p Test1234!
          ls -lah

      - name: Build Docker image locally
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ${{ vars.MSERVICES_SLN_PATH }}
          file: ${{ vars.MSERVICES_SLN_PATH }}/${{ matrix.proj_path }}/Dockerfile
          tags: ${{ matrix.image_name }}:latest
          outputs: type=docker,dest=${{ runner.temp }}/${{ matrix.image_name }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image_name }}
          path: ${{ runner.temp }}/${{ matrix.image_name }}.tar

  system_testing:
    if: false
    name: System Testing / External-Process
    runs-on: ubuntu-latest
    env:
      TEST_PROJ_PATH: ${{ vars.MSERVICES_SLN_PATH }}/test/system/ContosoUniversity.SystemTests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Docker Compose
      run: sudo curl -L "https://github.com/docker/compose/releases/download/v2.11.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - name: Set Permissions
      run: sudo chmod +x /usr/local/bin/docker-compose

    - name: Inspect Docker Environment
      run: |
        docker version
        docker compose version
        docker-compose version
        ls -lah

    - name: Developer Cert
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}/src/ContosoUniversity.Mvc
      run: |
        dotnet dev-certs https -ep cert.pfx -p Test1234!

    - name: Test run Docker environment
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: docker compose up --wait

    - name: Inspect container | courses-api
      if: always()
      run: docker inspect courses-api

    - name: Inspect container | departments-api
      if: always()
      run: docker inspect departments-api

    - name: Inspect container | students-api
      if: always()
      run: docker inspect students-api

    - name: Inspect container | cuweb
      if: always()
      run: docker inspect cuweb

    - name: Curl to cuweb
      if: always()
      run: curl http://localhost:10000/Courses

    - name: Curl to courses-api
      if: always()
      run: curl http://localhost:5006/api/courses | jq .

    - name: Curl to departments-api
      if: always()
      run: curl http://localhost:5079/api/departments | jq .

    - name: Curl to students-api
      if: always()
      run: curl http://localhost:5110/api/students/enrolled/groups | jq .

    - name: Grab container logs | cuweb
      if: always()
      run: docker logs cuweb

    - name: Grab container logs | mssql
      if: always()
      run: docker logs mssql

    - name: Grab container logs | mssql-migrator
      if: always()
      run: docker logs mssql-migrator

    - name: Grab container logs | courses-api
      if: always()
      run: docker logs courses-api

    - name: Grab container logs | departments-api
      if: always()
      run: docker logs departments-api

    - name: Grab container logs | students-api
      if: always()
      run: docker logs students-api

    - name: Shut down Docker Infra
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: docker compose down

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build System Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Ensure browsers are installed
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: pwsh bin/Debug/net9.0/playwright.ps1 install --with-deps

    - name: Run System Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet test --no-build --verbosity normal

  e2e_testing:
    if: false
    name: E2E Testing / External-Process
    runs-on: ubuntu-latest
    env:
      TEST_PROJ_PATH: ${{ vars.MSERVICES_SLN_PATH }}/test/e2e/ContosoUniversity.AcceptanceTests
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Docker Compose
      run: sudo curl -L "https://github.com/docker/compose/releases/download/v2.11.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - name: Set Permissions
      run: sudo chmod +x /usr/local/bin/docker-compose

    - name: Inspect Docker Environment
      run: |
        docker version
        docker compose version
        docker-compose version
        ls -lah

    - name: Developer Cert
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}/src/ContosoUniversity.Mvc
      run: |
        dotnet dev-certs https -ep cert.pfx -p Test1234!

    - name: Test run Docker environment
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: docker compose up --wait

    - name: Inspect container | courses-api
      if: always()
      run: docker inspect courses-api

    - name: Inspect container | departments-api
      if: always()
      run: docker inspect departments-api

    - name: Inspect container | students-api
      if: always()
      run: docker inspect students-api

    - name: Inspect container | cuweb
      if: always()
      run: docker inspect cuweb

    - name: Curl to cuweb
      if: always()
      run: curl http://localhost:10000/Courses

    - name: Curl to courses-api
      if: always()
      run: curl http://localhost:5006/api/courses | jq .

    - name: Curl to departments-api
      if: always()
      run: curl http://localhost:5079/api/departments | jq .

    - name: Curl to students-api
      if: always()
      run: curl http://localhost:5110/api/students/enrolled/groups | jq .

    - name: Grab container logs | cuweb
      if: always()
      run: docker logs cuweb

    - name: Grab container logs | mssql
      if: always()
      run: docker logs mssql

    - name: Grab container logs | mssql-migrator
      if: always()
      run: docker logs mssql-migrator

    - name: Grab container logs | courses-api
      if: always()
      run: docker logs courses-api

    - name: Grab container logs | departments-api
      if: always()
      run: docker logs departments-api

    - name: Grab container logs | students-api
      if: always()
      run: docker logs students-api

    - name: Shut down Docker Infra
      working-directory: ${{ vars.MSERVICES_SLN_PATH }}
      run: docker compose down

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build Acceptance Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Ensure browsers are installed
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: pwsh bin/Debug/net9.0/playwright.ps1 install --with-deps

    - name: Run Acceptance Tests
      working-directory: ${{ env.TEST_PROJ_PATH }}
      run: |
        dotnet test --no-build --verbosity normal
