name: "MNLTH / Deploy / Stop qa-aws-ecs"

on:
  workflow_dispatch:

env:
  TF_VERSION: 1.12.2

jobs:

  stop_web:
    name: Stop web Task
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Get web Task ARN
        run: |
          WEB_TASK_ARN=$(aws ecs list-tasks \
            --cluster contoso-mnlth-cluster \
            --family contoso-mnlth-web-tasks \
            --query 'taskArns' \
            --output text)
          if [ -z "$WEB_TASK_ARN" ]; then
            echo "No running web task found."
            exit 0
          fi
          echo "WEB_TASK_ARN=$WEB_TASK_ARN" >> $GITHUB_ENV

      - name: Stop web Task
        if: env.WEB_TASK_ARN != ''
        run: |
          aws ecs stop-task \
            --cluster contoso-mnlth-cluster \
            --task ${{ env.WEB_TASK_ARN }}

      - name: üßë‚Äçüíª Wait for web Task to stop
        if: env.WEB_TASK_ARN != ''
        run: |
          aws ecs wait tasks-stopped \
            --cluster contoso-mnlth-cluster \
            --tasks ${{ env.WEB_TASK_ARN }}

  stop_mssql:
    name: Stop mssql Task
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Get mssql Task ARN
        run: |
          MSSQL_TASK_ARN=$(aws ecs list-tasks \
            --cluster contoso-mnlth-cluster \
            --family contoso-mnlth-mssql-tasks \
            --query 'taskArns' \
            --output text)
          if [ -z "$MSSQL_TASK_ARN" ]; then
            echo "No running mssql task found."
            exit 0
          fi
          echo "MSSQL_TASK_ARN=$MSSQL_TASK_ARN" >> $GITHUB_ENV

      - name: Stop mssql Task
        if: env.MSSQL_TASK_ARN != ''
        run: |
          aws ecs stop-task \
            --cluster contoso-mnlth-cluster \
            --task ${{ env.MSSQL_TASK_ARN }}

      - name: üßë‚Äçüíª Wait for mssql Task to stop
        if: env.MSSQL_TASK_ARN != ''
        run: |
          aws ecs wait tasks-stopped \
            --cluster contoso-mnlth-cluster \
            --tasks ${{ env.MSSQL_TASK_ARN }}

  dispose_infra:
    name: Dispose AWS infra
    needs: [stop_web, stop_mssql]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ vars.MONOLITH_SLN_PATH }}/iac/envs/qa-aws-ecs

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Terraform install
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform init
        run: terraform init

      - name: Terraform format and validate
        run: terraform fmt -check && terraform validate

      - name: Terraform plan destroy
        run: |
          terraform plan -destroy \
            -var="db_username=sa" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="db_init_script=db-init.sql" \
            -var="local_ip=NOT_USED" \
            -out=tfplan

      - name: Terraform apply destroy
        run: terraform apply -auto-approve tfplan

      - name: Notify failure
        if: failure()
        run: echo "Terraform apply failed for ${{ github.ref_name }}"
