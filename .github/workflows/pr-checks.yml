name: Pull Request Checks

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOTNET_VERSION: 6.0.x

jobs:

  build_and_unit_testing:
    if: false
    name: Build and Unit Testing
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build Solution
      run: |
        dotnet restore
        dotnet build --no-restore
      
    - name: Run Unit Tests
      working-directory: test/unit/ContosoUniversity.Domain.Tests
      run: dotnet test --no-build --verbosity normal
      
  code_style_checks:
    if: false
    name: Code style checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build Solution
      run: |
        dotnet restore
        dotnet build --no-restore
      
    - name: Dotnet Format Checks (Whitespaces)
      run: |
        dotnet format whitespace \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes
      
    - name: Dotnet Format Checks (Style)
      run: |
        dotnet format style \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes
      
    - name: Dotnet Format Checks (Analizers)
      run: |
        dotnet format analyzers \
        --no-restore \
        --exclude ./src/*/Migrations \
        --verify-no-changes
      
  integration_testing:
    if: false
    name: Integration Testing
    runs-on: ubuntu-latest
    services:
      cudb:
        image: mcr.microsoft.com/mssql/server
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
        ports:
          - 1433:1433
        volumes:
          - sqlvolume:/var/opt/mssql
        options: >-
          --name cudb
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # - run: docker container list
    # - run: docker container inspect cudb
    # - run: docker network list
    
    # - name: Resolve container network
    #   run: docker inspect cudb --format '{{range $key, $_ := .NetworkSettings.Networks}}{{$key}}{{end}}'
      
    - name: Resolve container network
      id: get_network
      run: |
        echo "network=$(docker inspect cudb --format '{{range $key, $_ := .NetworkSettings.Networks}}{{$key}}{{end}}')" >> "$GITHUB_OUTPUT"
        
    - name: Init container database
      run: |
        docker run --rm \
        --entrypoint /opt/mssql-tools/bin/sqlcmd \
        --workdir /scripts \
        --volume "$(pwd)"/database:/scripts \
        --network ${{ steps.get_network.outputs.network }} \
        mcr.microsoft.com/mssql-tools \
        -S cudb -U SA -P "${{ secrets.MSSQL_SA_PASSWORD }}" -i "db-init.sql"
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
      
    - name: Build Integration Tests
      working-directory: test/integration/ContosoUniversity.Mvc.IntegrationTests
      run: |
        dotnet restore
        dotnet build --no-restore
      
    - name: Run Integration Tests
      working-directory: test/integration/ContosoUniversity.Mvc.IntegrationTests
      run: |
        dotnet test --no-build --verbosity normal
      
  build_sut_image:
    name: Build local `cuweb` image
    runs-on: ubuntu-latest
    steps:
      - name: Docker build cuweb
        working-directory: src/ContosoUniversity.Mvc
        run: docker build -t cuweb .

      - name: Inspect cuweb image just built
        run: |
          docker image list
          docker image inspect cuweb

  e2e_testing:
    name: E2E Testing (Playwright)
    runs-on: ubuntu-latest
    needs: build_sut_image
    services:
      cudb:
        image: mcr.microsoft.com/mssql/server
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
        ports:
          - 1433:1433
        volumes:
          - sqlvolume:/var/opt/mssql
        options: >-
          --name cudb
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Resolve container network
      id: get_network
      run: |
        echo "network=$(docker inspect cudb --format '{{range $key, $_ := .NetworkSettings.Networks}}{{$key}}{{end}}')" >> "$GITHUB_OUTPUT"
      
    - name: Init container database
      run: |
        docker run --rm \
        --entrypoint /opt/mssql-tools/bin/sqlcmd \
        --workdir /scripts \
        --volume "$(pwd)"/database:/scripts \
        --network ${{ steps.get_network.outputs.network }} \
        mcr.microsoft.com/mssql-tools \
        -S cudb -U SA -P "${{ secrets.MSSQL_SA_PASSWORD }}" -i "db-init.sql"
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Check for the available dev certificate
      run: dotnet dev-certs https --check
      
    - name: Clean up dev certificates
      run: sudo dotnet dev-certs https --clean
      
    - name: Create dev certificate
      run: dotnet dev-certs https -ep ~/.aspnet/https/ContosoUniversity.Mvc.pfx -p ${{ secrets.CERTIFICATE_PASS }}
      
    - name: Trust dev certificate
      run: dotnet dev-certs https --trust
      
    - name: Set secret for certificate password
      run: dotnet user-secrets --project 'src/ContosoUniversity.Mvc' set 'Kestrel:Certificates:Development:Password' '${{ secrets.CERTIFICATE_PASS }}'
      
    - name: Inspect certificate storage
      run: ls -alR ~/.aspnet
      
    - name: Inspect secrets storage
      run: ls -alR ~/.microsoft

    # - name: Docker build cuweb
    #   run: docker build -t cuweb -f src/ContosoUniversity.Mvc/Dockerfile .

    - name: Inspect cuweb image just built
      run: |
        docker image list
        docker image inspect cuweb
      
    - name: Docker run cuweb app container
      run: |
        docker run -d --rm --name cuweb -p 10000:80 -p 10001:443 \
        --network ${{ steps.get_network.outputs.network }} \
        --env ASPNETCORE_ENVIRONMENT="Development" \
        --env ASPNETCORE_PORT="https://+:443;http://+:80" \
        --env ASPNETCORE_URLS="https://+:443;http://+:80" \
        --env ASPNETCORE_HTTPS_PORT=10001 \
        --env CONTOSO_DB_HOST="db,1433" \
        --volume ~/.aspnet/https:/root/.aspnet/https:ro \
        --volume ~/.microsoft/usersecrets:/root/.microsoft/usersecrets:ro \
        cuweb

    - name: Inspect cuweb container just started
      run: |
        docker container list
        docker container inspect cuweb

    - name: Update curl
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
      
    - name: Check site availability
      run: curl https://127.0.0.1:10001
      
    # - name: Build E2E Tests
    #   working-directory: test/e2e/ContosoUniversity.AcceptanceTests
    #   run: |
    #     dotnet restore
    #     dotnet build --no-restore

    # - name: Ensure browsers are installed
    #   run: pwsh test/e2e/ContosoUniversity.AcceptanceTests/bin/Debug/net6.0/playwright.ps1 install --with-deps
      
    # - name: Run E2E Tests
    #   working-directory: test/e2e/ContosoUniversity.AcceptanceTests
    #   run: dotnet test --no-build --verbosity normal
